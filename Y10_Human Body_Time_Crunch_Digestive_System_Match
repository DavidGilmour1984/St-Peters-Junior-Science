<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Drag-and-Drop Digestion Quiz</title>
  <style>
    body {
      font-family: Helvetica, sans-serif;
      padding: 2em;
      background-color: #f5f5f5;
      text-align: center;
    }

    .card {
      background: white;
      padding: 2em;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      max-width: 900px;
      margin: auto;
    }

    #timer {
      font-size: 1.5rem;
      margin-bottom: 10px;
    }

    table {
      margin: 20px auto;
      border-collapse: collapse;
      width: 100%;
    }

    th, td {
      padding: 12px;
      border: 1px solid #ccc;
      text-align: center;
    }

    .blank {
      background-color: #f0f0f0;
      min-height: 30px;
      border-radius: 6px;
      font-weight: bold;
    }

    .draggable {
      background: #e0e0e0;
      border-radius: 8px;
      padding: 10px 15px;
      cursor: grab;
      font-size: 1rem;
      user-select: none;
      transition: background 0.3s;
    }

    .draggable:hover {
      background: #d0d0d0;
    }

    .word-bank {
      margin-top: 20px;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    button {
      margin-top: 1.5em;
      padding: 0.8em 1.6em;
      font-size: 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      background-color: #007bff;
      color: white;
      transition: background 0.3s;
    }

    button:hover {
      background-color: #0056b3;
    }

    .button-row {
      display: flex;
      justify-content: center;
      gap: 15px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="card">
    <h2>Drag-and-Drop Digestion Speed run</h2>
    <div id="timer">Time: <span id="timer-display">0.00</span> seconds</div>

    <table>
      <thead>
        <tr>
          <th>Substance</th>
          <th>Primary Location of Digestion</th>
          <th>Primary Enzyme</th>
          <th>Products</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Carbohydrates</td>
          <td class="blank" id="carbohydrate-location" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
          <td class="blank" id="carbohydrate-enzyme" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
          <td class="blank" id="carbohydrate-products" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
        </tr>
        <tr>
          <td>Lipids</td>
          <td class="blank" id="lipid-location" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
          <td class="blank" id="lipid-enzyme" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
          <td class="blank" id="lipid-products" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
        </tr>
        <tr>
          <td>Proteins</td>
          <td class="blank" id="protein-location" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
          <td class="blank" id="protein-enzyme" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
          <td class="blank" id="protein-products" ondragover="allowDrop(event)" ondrop="drop(event)"></td>
        </tr>
      </tbody>
    </table>

    <div class="word-bank" id="word-bank">
      <div class="draggable" draggable="true" id="Mouth" ondragstart="drag(event)">Mouth</div>
      <div class="draggable" draggable="true" id="Small Intestine" ondragstart="drag(event)">Small Intestine</div>
      <div class="draggable" draggable="true" id="Stomach" ondragstart="drag(event)">Stomach</div>
      <div class="draggable" draggable="true" id="Amylase" ondragstart="drag(event)">Amylase</div>
      <div class="draggable" draggable="true" id="Lipase" ondragstart="drag(event)">Lipase</div>
      <div class="draggable" draggable="true" id="Pepsin" ondragstart="drag(event)">Pepsin</div>
      <div class="draggable" draggable="true" id="Glucose" ondragstart="drag(event)">Glucose</div>
      <div class="draggable" draggable="true" id="Fatty Acids" ondragstart="drag(event)">Fatty Acids</div>
      <div class="draggable" draggable="true" id="Amino Acids" ondragstart="drag(event)">Amino Acids</div>
    </div>

    <div class="button-row">
      <button onclick="checkAnswers()">Check Answer</button>
      <button onclick="restartQuiz()">Restart</button>
    </div>
  </div>
<script>
  const wordList = [
    "Mouth", "Small Intestine", "Stomach",
    "Amylase", "Lipase", "Pepsin",
    "Glucose", "Fatty Acids and Glycerol", "Amino Acids"
  ];

  const correctAnswers = {
    "carbohydrate-location": "Mouth",
    "carbohydrate-enzyme": "Amylase",
    "carbohydrate-products": "Glucose",
    "lipid-location": "Small Intestine",
    "lipid-enzyme": "Lipase",
    "lipid-products": "Fatty Acids",
    "protein-location": "Stomach",
    "protein-enzyme": "Pepsin",
    "protein-products": "Amino Acids"
  };

  let timerInterval;
  let startTime;
  let isStarted = false;

  function allowDrop(ev) {
    ev.preventDefault();
  }

  function drag(ev) {
    ev.dataTransfer.setData("text", ev.target.id);
  }

  function drop(ev) {
    ev.preventDefault();
    const wordId = ev.dataTransfer.getData("text");
    const dragged = document.getElementById(wordId);

    if (ev.target.classList.contains("blank") && ev.target.children.length === 0) {
      ev.target.appendChild(dragged);
      if (!isStarted) startTimer();
    }
  }

  function startTimer() {
    isStarted = true;
    startTime = Date.now();
    timerInterval = setInterval(() => {
      const elapsed = (Date.now() - startTime) / 1000;
      document.getElementById("timer-display").textContent = elapsed.toFixed(2);
    }, 50);
  }

  function stopTimer() {
    clearInterval(timerInterval);
  }

  function checkAnswers() {
    let correct = 0;

    // To store the incorrect words
    const incorrectWords = [];

    // Loop through each correct answer and check if it's in the table
    for (const id in correctAnswers) {
      const cell = document.getElementById(id);
      const word = cell.textContent.trim();

      if (word === correctAnswers[id]) {
        cell.style.backgroundColor = "#a0e6a0"; // green (correct answer)
        correct++;
      } else {
        cell.style.backgroundColor = "#e6a0a0"; // red (incorrect answer)
        // If incorrect, add the word to the incorrectWords array
        incorrectWords.push(correctAnswers[id]);
        // Clear incorrect answers from the table
        cell.textContent = '';
      }
    }

    // If all answers are correct, stop the timer
    if (correct === Object.keys(correctAnswers).length) {
      stopTimer();
    }

    // Re-populate the word bank with incorrect words
    populateWordBankWithIncorrect(incorrectWords);
  }

  function populateWordBankWithIncorrect(incorrectWords) {
    const bank = document.getElementById("word-bank");
    bank.innerHTML = ""; // Clear current word bank

    // Only add the incorrect words back to the word bank
    incorrectWords.forEach(word => {
      const div = document.createElement("div");
      div.className = "draggable";
      div.draggable = true;
      div.id = word;
      div.textContent = word;
      div.ondragstart = drag;
      bank.appendChild(div);
    });
  }

  function restartQuiz() {
    stopTimer();
    document.getElementById("timer-display").textContent = "0.00";
    isStarted = false;

    // Clear all table blanks and reset background colors
    for (const id in correctAnswers) {
      const cell = document.getElementById(id);
      if (cell.firstChild) {
        cell.removeChild(cell.firstChild);
      }
      cell.style.backgroundColor = "#f0f0f0"; // reset background
    }

    populateWordBank(); // reshuffle words
  }

  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  function populateWordBank() {
    const bank = document.getElementById("word-bank");
    bank.innerHTML = ""; // clear the bank before repopulating
    const shuffled = [...wordList];
    shuffleArray(shuffled);

    shuffled.forEach(word => {
      const div = document.createElement("div");
      div.className = "draggable";
      div.draggable = true;
      div.id = word;
      div.textContent = word;
      div.ondragstart = drag;
      bank.appendChild(div);
    });
  }

  // Initialize on load
  window.onload = () => {
    populateWordBank();
  };
</script>

</body>
</html>
